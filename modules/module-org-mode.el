;; org-transclusion

(new-external-dependency! 'pdflatex)
(new-external-dependency! 'dvipng)
(when dk/windows-flag
  ;; Make more obvious what to install.
  (new-external-dependency! 'miktex))

;; Start [Custom Macro System]--------------------------------------------------
;;
;; Normal case:
;; - Use `dk/org-gen-defun!' to generate a function that is invoked when the
;;   keybind is pressed.
;; - The second argument for `dk/org-gen-defun!' is the lambda generated by
;;   `dk/org-gen-insert-lambda'. It expects the string and how many characters
;;   the point must be moved back to be at the correct insert location.
;; - Finally, register the symbol from `dk/org-gen-defun!' in the :bind section
;;   of the org use-package declaration.
;;
;; Good luck!
;;
;; Special cases:

(defun dk/org-latex-environment-insert ()
  "Insert a environment at point."
  (interactive)
  (let* ((begin "\\begin{%s}")
	 (end "\\end{%s}")
	 (end-length (- (length end) 2))
	 (input (read-string "env: "))
	 (input-length (length input)))
    (insert (format begin input))
    (insert (format end input))
    (backward-char (+ end-length input-length))))

(defun dk/org-latex-command-insert ()
  "Insert a command at point."
  (interactive)
  (let ((command (read-string "cmd: ")))
    (insert (format "\\%s{}" command))
    (backward-char)))

(defmacro dk/org-gen-insert-lambda (str backward)
  `(lambda () (interactive) (insert ,str) (backward-char ,backward)))

(defmacro dk/org-gen-defun! (name func)
  (declare (indent defun))
  `(defun ,name () (interactive) (funcall ,func)))

(dk/org-gen-defun! dk/org-latex-centered-fragment
  (dk/org-gen-insert-lambda "\\[\\]" 2))
(dk/org-gen-defun! dk/org-latex-inline-fragment
  (dk/org-gen-insert-lambda "\\(\\)" 2))
(dk/org-gen-defun! dk/org-latex-backslash
  (dk/org-gen-insert-lambda "\\" 0))
(dk/org-gen-defun! dk/org-latex-align-env
  (dk/org-gen-insert-lambda "\\begin{align*}\n\n\\end{align*}" 13))
(dk/org-gen-defun! dk/org-latex-bmatrix
  (dk/org-gen-insert-lambda "\\begin{bmatrix}\n\n\\end{bmatrix}" 14))
(dk/org-gen-defun! dk/org-latex-frac
  (dk/org-gen-insert-lambda "\\frac{}{}" 3))
(dk/org-gen-defun! dk/org-latex-cases
  (dk/org-gen-insert-lambda "\\begin{cases}\n\n\\end{cases}" 12))
(dk/org-gen-defun! dk/org-latex-text
  (dk/org-gen-insert-lambda "\\text{}" 1))

;; End [Custom Macro System]----------------------------------------------------

(use-package org
  :pin melpa
  :init
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)(plantuml . t)(python . t)(shell . t)(C . t)))
  :hook
  ((org-mode . prettify-symbols-mode)
   (org-mode . (lambda () (setq fill-column 70)))
   (org-mode . turn-on-auto-fill)
   (org-mode . company-mode))
  :custom
  ((org-src-fontify-natively t)
   (org-highlight-latex-and-related '(latex script entities))
   (org-startup-with-latex-preview t)
   (org-adapt-indentation nil)
   (org-src-tab-acts-natively t)
   (org-catch-invisible-edits 'smart)
   (org-ctrl-k-protect-subtree t)
   (prettify-symbols-unprettify-at-point 'right-edge)
   (org-agenda-files `(,(concat dk/user-system-base-path "TODOs.org")))
   (org-latex-preview-ltxpng-directory "~/.ltxpng/")
   ;; (org-latex-listings 'minted)
   (org-latex-src-block-backend 'engraved)
   (org-latex-packages-alist '(("AUTO" "babel"  nil nil)
        		       (""     "mhchem" t   nil)))
   (org-return-follows-link t)
   (org-confirm-babel-evaluate nil)
   (org-edit-src-content-indentation 0)
   (org-src-preserve-indentation t)
   (org-export-babel-evaluate t)
   (org-id-locations-file
    (concat dk/user-emacs-cache-dir "org/.org-id-locations"))
   (org-export-allow-bind-keywords t)
   (org-image-actual-width nil)
   (org-special-ctrl-a/e t))
  :bind
  (:map org-mode-map
        ("C-c m s" . dk/org-latex-command-insert)
        ("C-c m x" . dk/org-latex-environment-insert)
        ("C-c m m" . dk/org-latex-centered-fragment)
        ("C-c m i" . dk/org-latex-inline-fragment)
        ("C-o"     . dk/org-latex-backslash)
        ("C-c m a" . dk/org-latex-align-env)
        ("C-c m b" . dk/org-latex-bmatrix)
        ("C-c m f" . dk/org-latex-frac)
        ("C-c m c" . dk/org-latex-cases)
        ("C-c m t" . dk/org-latex-text))
  :config
  (local-unset-key (kbd "C-x m"))
  ;; Make doc-view-mode not ask to revert buffer.
  (setq revert-without-query '(".pdf")))

(defun dk/org-latex-fragments-scaling ()
  (interactive)
  (let* ((current (plist-get org-format-latex-options :scale))
	 (new (read-number (format "New scaling (current %s): " current) 1.0)))
    (plist-put org-format-latex-options :scale new)))

(use-package anki-editor
  :quelpa (anki-editor :fetcher github
		       :repo "/anki-editor/anki-editor"
		       :files ("*")))

;; For setting org-latex-src-block-backend
(use-package engrave-faces)

(use-package htmlize
  :defer t)

(use-package org-fragtog
  :defer t
  :if (window-system)
  :hook
  ((org-mode . org-fragtog-mode)))

(use-package org-appear
  :defer t
  :if (window-system)
  :hook
  (org-mode . org-appear-mode)
  :custom
  ((org-hide-emphasis-markers t)
   (org-appear-autoemphasis t)
   (org-appear-autolinks t)
   (org-appear-autosubmarkers t)))

(use-package org-tempo
  :ensure nil)

(use-package org-tidy
  :disabled t
  ;; Hide :PROPERTIES: from the buffer.
  :hook
  ((org-mode . org-tidy-mode)))

(use-package org-modern
  :hook
  ((org-mode . org-modern-mode)))

(new-external-dependency! 'gnupg) ;; pacman -S mingw-w32-x86_64-gnupg

(provide 'module-org-mode)
